{"version":3,"sources":["components/molecule/Logo/style.module.css","components/atom/Container/style.module.css","components/organism/PlanetCardLoading/style.module.css","components/organism/PlanetCard/style.module.css","components/organism/PlanetInformation/style.module.css","pages/style.module.css","components/molecule/LabelValueText/style.module.css","assets/fonts/Starjedi.ttf","assets/fonts/RobotoRegular.ttf","components/atom/NavBar.tsx","components/atom/Title.tsx","components/molecule/Logo/Logo.tsx","components/organism/Header.tsx","utils/className.ts","components/atom/Container/Container.tsx","components/organism/PlanetCardLoading/PlanetCardLoading.tsx","hooks/PlanetContext.ts","utils/validators/planetValidator.ts","requesters/PlanetRequester.ts","components/molecule/LabelValueText/LabelValueText.tsx","components/organism/PlanetInformation/PlanetInformation.tsx","components/organism/PlanetCard/PlanetCard.tsx","pages/RandomPlanetPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","NavBar","children","className","Title","Logo","styles","logo","Header","getClassNames","firstClassName","secondClassName","Container","container","PlanetCardLoading","planetCardContainer","role","planetDefault","name","population","climate","terrain","films","setPlanetDefault","PlanetContext","React","createContext","planet","setPlanet","validatePlanet","data","AJV","allErrors","validate","planetJSC","getPlanetById","id","a","Axios","get","res","length","Error","getPlanetRandom","randomId","Math","floor","random","LabelValueText","label","value","labelClassName","valueClassName","style","KeyValueContainer","labelContainer","valueContainer","PlanetInformation","textClass","animatedText","planetInformationContainer","planetPopulationClimateTerrainContainer","featuredTextContainer","featuredFilmsText","undefined","filmsText","PlanetCard","RandomPlanetPage","useContext","usePlanetContext","useState","loading","setLoading","useEffect","fetchAndSetPlanet","pageContainer","cardContainer","buttonContainer","type","onClick","fetchPlanet","App","useCreatePlanetContext","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ace26d29.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"style_logo__3n5n8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__yiS0z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"planetCardContainer\":\"style_planetCardContainer__2EhzA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"planetCardContainer\":\"style_planetCardContainer__11IZ7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"planetInformationContainer\":\"style_planetInformationContainer__3w1Rl\",\"animatedText\":\"style_animatedText__qxBx_\",\"animateright\":\"style_animateright__2eiM1\",\"planetPopulationClimateTerrainContainer\":\"style_planetPopulationClimateTerrainContainer__17D6P\",\"featuredTextContainer\":\"style_featuredTextContainer__K20Bo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageContainer\":\"style_pageContainer__A6Y_Z\",\"cardContainer\":\"style_cardContainer__2txXS\",\"buttonContainer\":\"style_buttonContainer__pSlmO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"KeyValueContainer\":\"style_KeyValueContainer__lRS85\",\"labelContainer\":\"style_labelContainer__3d8-n\",\"valueContainer\":\"style_valueContainer__2AuOI\"};","module.exports = __webpack_public_path__ + \"static/media/Starjedi.cc3019aa.ttf\";","module.exports = __webpack_public_path__ + \"static/media/RobotoRegular.11eabca2.ttf\";","import React, { ReactElement } from 'react';\r\n\r\ninterface NavBarProps {\r\n    children : ReactElement\r\n}\r\n\r\n/**\r\n *  Este componente renderiza uma navbar.\r\n * @param children componente que ser치 renderizado dentro da navbar\r\n */\r\n\r\nexport const NavBar = ({children} : NavBarProps) => {\r\n\r\n    return (<nav className={\"navbar navbar-expand-lg navbar-light bg-dark\"}>\r\n        {children}\r\n    </nav>)\r\n}","import React from \"react\";\r\n\r\n/**\r\n * Este componente serve para renderizar um texto de titulo\r\n */\r\n\r\ninterface TitleProps {\r\n    children: string\r\n    className?: string;\r\n}\r\n\r\nexport const Title = ({children , className}: TitleProps) => {\r\n  return (\r\n    <h1 {...className? {className} : {}}>{children}</h1>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./style.module.css\";\r\nimport { Title } from \"../../atom/Title\";\r\n\r\n/**\r\n * Este componente serve para renderizar o logo da p치gina.\r\n */\r\nexport const Logo = () => {\r\n  return (\r\n    <Title className={styles.logo}>Star Wars Planets</Title>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { NavBar } from '../atom/NavBar';\r\nimport { Logo } from '../molecule/Logo/Logo';\r\n\r\n\r\n/**\r\n * Este componente renderiza o Header da p치gina.\r\n */\r\nexport const Header = () => {\r\n    return (  <NavBar>\r\n        <Logo />\r\n      </NavBar>)\r\n}","export const getClassNames = (\r\n  firstClassName: string,\r\n  secondClassName?: string\r\n) => {\r\n  return secondClassName\r\n    ? `${firstClassName} ${secondClassName}`\r\n    : `${firstClassName}`;\r\n};\r\n","import React from \"react\";\r\nimport { getClassNames } from \"../../../utils/className\";\r\nimport styles from \"./style.module.css\";\r\n\r\ninterface ContainerProps {\r\n  children?: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\n/**\r\n *\r\n * @param children Elemento que ser치 mostrado dentro do container\r\n * @param className Classe adicional que o componente pode possuir\r\n */\r\n\r\nexport const Container = ({ children, className }: ContainerProps) => {\r\n  return (\r\n    <div className={getClassNames(styles.container, className)}>{children}</div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Container } from \"../../atom/Container/Container\";\r\nimport styles from \"./style.module.css\";\r\nimport { getClassNames } from \"../../../utils/className\";\r\n//import ReactLoading from \"react-loading\";\r\n\r\n/**\r\n *\r\n * Este componente renderiza um cart칚o com um \"Loading\" dentro\r\n*/\r\n\r\nexport const PlanetCardLoading = () => {\r\n  return (\r\n    <Container className={getClassNames(styles.planetCardContainer,\"bg-secondary\")}>\r\n      <div className=\"spinner-border text-warning\" role=\"status\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n","import React, { useState, useContext } from \"react\";\r\nimport { AppPlanet } from \"../models/AppModels/Planet\";\r\n\r\n/**\r\n * Planeta padr칚o que ir치 iniciar o contexto.\r\n */\r\nconst planetDefault: AppPlanet = {\r\n    name: \"planeta\",\r\n    population: \"10000\",\r\n    climate: \"too hot\",\r\n    terrain: \"snowy\",\r\n    films: 0\r\n  };\r\n\r\n/**\r\n * fun칞칚o de setState padr칚o que ir치 iniciar o contexto\r\n */ \r\nconst setPlanetDefault: React.Dispatch<React.SetStateAction<AppPlanet>> = () => {};\r\n\r\n/**\r\n * contexto que ir치 salvar as informa칞칫es do planeta atual\r\n */\r\nexport const PlanetContext = React.createContext({\r\n    planet: planetDefault,\r\n    setPlanet: setPlanetDefault\r\n});\r\n  \r\n/**\r\n * hook que ir치 criar o contexto do planeta com estados do planeta atual e seta o planeta atual\r\n */\r\nexport const useCreatePlanetContext = () => {\r\n    const [planet, setPlanet] = useState(planetDefault);\r\n    React.createContext({\r\n        planet: planetDefault,\r\n        setPlanet: setPlanetDefault\r\n      });\r\n    return {planet,setPlanet}\r\n}\r\n\r\n/**\r\n * hook para pegar o contxto do planeta atual\r\n */\r\nexport const usePlanetContext = () => {\r\n    const {planet,setPlanet} = useContext(PlanetContext)\r\n    return {planet, setPlanet}\r\n}\r\n\r\n","import AJV from \"ajv\";\r\nimport planetJSC from \"../../models/schemas/planet.json\";\r\nimport { Planet } from \"../../models/planet.js\";\r\n\r\n\r\n//Fun칞칚o que valida se o dado recebido 칠 um planeta\r\nexport const validatePlanet = (data: any): data is Planet => {\r\n  const ajv = new AJV({ allErrors: true });\r\n  const valid = ajv.validate(planetJSC, data);\r\n  return !!valid;\r\n};\r\n","import { validatePlanet } from \"../utils/validators/planetValidator\";\r\nimport Axios from \"axios\";\r\n\r\n/**\r\n * esta fun칞칚o pega informa칞칫es de um planeta na API dado o id\r\n * @param id id do planeta que ir치 ser buscado\r\n */\r\nexport const getPlanetById = async (id: number) => {\r\n  const res = await Axios.get(`https://swapi.co/api/planets/${id}/`);\r\n  const { data } = res;\r\n  if (validatePlanet(data)) {\r\n    return { ...data, films: data.films.length };\r\n  } else {\r\n    throw new Error(\"tipagem inv치lida do planeta\");\r\n  }\r\n};\r\n\r\n/**\r\n * esta fun칞칚o pega um planeta aleat칩rio da API.\r\n * existem apenas 60 planetas na API. Era poss칤vel buscar a quantidade na API\r\n * mas seriam feitos dois requests e o request para verificar o n칰mero de planetas era pegar todos os planetas\r\n * logo foi decidido manter o n칰mero aqui\r\n */\r\n\r\nexport const getPlanetRandom = async () => {\r\n  const randomId = Math.floor(Math.random() * 61) + 1;\r\n  return await getPlanetById(randomId);\r\n};\r\n","import React from \"react\";\r\nimport style from \"./style.module.css\";\r\n\r\ninterface LabelValueTextProps {\r\n  label: string;\r\n  value: string;\r\n  labelClassName?: string;\r\n  valueClassName?: string;\r\n}\r\n\r\n/**\r\n * Este componente renderiza um texto ao estilo \"label value\", onde ficam em uma linha lado a lado.\r\n * @param label representa o texto que ir치 aparecer na label. Ele 칠 posicionado a esquerda.\r\n * @param value representa o texto do valor que ir치 aparecer. Ele 칠 posicionado a direita.\r\n * @param labelClassName Classe customizada que ir치 ser adicionada ao texto do label.\r\n * @param valueClassName Classe customizada que ir치 ser adicionada ao texto do value.\r\n */\r\nexport const LabelValueText = ({\r\n  label,\r\n  value,\r\n  labelClassName,\r\n  valueClassName\r\n}: LabelValueTextProps) => {\r\n  return (\r\n    <div className={style.KeyValueContainer}>\r\n      <div className={style.labelContainer}>\r\n        <p className={labelClassName}>{label}</p>\r\n      </div>\r\n      <div className={style.valueContainer}>\r\n        <p className={valueClassName}>{value}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { LabelValueText } from \"../../molecule/LabelValueText/LabelValueText\";\r\nimport style from \"./style.module.css\";\r\nimport { getClassNames } from \"../../../utils/className\";\r\n\r\nexport interface PlanetInformationProps {\r\n  population: string;\r\n  climate: string;\r\n  terrain: string;\r\n  films?: number;\r\n}\r\n\r\n/**\r\n * Este componente renderiza todas as informa칞칫es do planeta (popula칞칚o , clima, terreno e n칰mero de fiulmes)\r\n * @param population popula칞칚o do planeta\r\n * @param climate clima do planeta\r\n * @param terrain terreno que o planeta possui\r\n * @param films n칰mero de filmes em que o planeta apareceu\r\n */\r\n\r\n\r\nexport const PlanetInformation = ({\r\n  population,\r\n  climate,\r\n  terrain,\r\n  films\r\n}: PlanetInformationProps) => {\r\n  const textClass = getClassNames(style.animatedText, \"text-warning\")\r\n  return (\r\n    <div className={style.planetInformationContainer}>\r\n      <div className={style.planetPopulationClimateTerrainContainer}>\r\n      <LabelValueText\r\n        label={\"Population: \"}\r\n        value={population}\r\n        labelClassName={textClass}\r\n        valueClassName={textClass}\r\n      />\r\n      <LabelValueText\r\n        label={\"Climate: \"}\r\n        value={climate}\r\n        labelClassName={textClass}\r\n        valueClassName={textClass}\r\n      />\r\n      <LabelValueText\r\n        label={\"Terrain: \"}\r\n        value={terrain}\r\n        labelClassName={textClass}\r\n        valueClassName={textClass}\r\n      />\r\n      </div>\r\n      <div className={style.featuredTextContainer}>\r\n      <p className={textClass}>{featuredFilmsText(films)}</p>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst featuredFilmsText = (films?: number) => {\r\n  if (films === undefined) {\r\n    return \"\";\r\n  }\r\n  const filmsText = films > 1 ? \"films\" : \"film\";\r\n  return `Feature in ${films} ${filmsText} `;\r\n};\r\n","import React from \"react\";\r\nimport { Title } from \"../../atom/Title\";\r\nimport {\r\n  PlanetInformation,\r\n  PlanetInformationProps\r\n} from \"../PlanetInformation/PlanetInformation\";\r\nimport styles from \"./style.module.css\";\r\nimport { getClassNames } from \"../../../utils/className\";\r\n\r\ninterface PlanetCardProps extends PlanetInformationProps {\r\n  name: string;\r\n}\r\n\r\n/**\r\n *\r\n * Estge componente renderiza um cart칚o mostrando as informa칞칫es de um planeta\r\n *\r\n * @param name nome do planeta\r\n * @param population popula칞칚o do planeta\r\n * @param climate clima do planeta\r\n * @param terrian terreno do planeta\r\n * @param films  n칰mero de filmes que o planeta aparece\r\n */\r\n\r\nexport const PlanetCard = ({\r\n  name,\r\n  population,\r\n  climate,\r\n  terrain,\r\n  films\r\n}: PlanetCardProps) => {\r\n  return (\r\n    <div className={ getClassNames(styles.planetCardContainer, \"bg-secondary\")}>\r\n      <Title className={\"text-warning\"}>{name}</Title>\r\n      <PlanetInformation\r\n        population={population}\r\n        climate={climate}\r\n        terrain={terrain}\r\n        films={films}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport style from \"./style.module.css\";\r\nimport { PlanetCardLoading } from \"../components/organism/PlanetCardLoading/PlanetCardLoading\";\r\nimport { usePlanetContext } from \"../hooks/PlanetContext\";\r\nimport { getPlanetRandom } from \"../requesters/PlanetRequester\";\r\nimport { Container } from \"../components/atom/Container/Container\";\r\nimport { PlanetCard } from \"../components/organism/PlanetCard/PlanetCard\";\r\n\r\n\r\n/**\r\n * Esse componente renderiza a p치gina que ir치 mostrar os planetas aleat칩rios\r\n */\r\nexport const RandomPlanetPage = () => {\r\n  const { planet, setPlanet } = usePlanetContext();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    fetchAndSetPlanet(setPlanet, setLoading);\r\n  }, [setPlanet, setLoading]);\r\n\r\n  const nextClick = () => {\r\n    fetchAndSetPlanet(setPlanet, setLoading);\r\n  };\r\n\r\n  return (\r\n    <div className={style.pageContainer}>\r\n      <Container className={style.cardContainer}>\r\n        {loading ? (\r\n          <PlanetCardLoading />\r\n        ) : (\r\n          <PlanetCard\r\n            population={planet.population}\r\n            climate={planet.climate}\r\n            terrain={planet.terrain}\r\n            name={planet.name}\r\n            films={planet.films}\r\n          />\r\n        )}\r\n      </Container>\r\n      <div className={style.buttonContainer}>\r\n        <button type=\"button\" className=\"btn btn-secondary\" onClick={nextClick}>Next</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst fetchAndSetPlanet = async (setPlanet: any, setLoading: any) => {\r\n  async function fetchPlanet() {\r\n    setLoading(true);\r\n    const planet = await getPlanetRandom();\r\n    setPlanet(planet);\r\n    setLoading(false);\r\n  }\r\n  fetchPlanet();\r\n};\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Header } from './components/organism/Header';\r\nimport { RandomPlanetPage } from './pages/RandomPlanetPage';\r\nimport { useCreatePlanetContext, PlanetContext } from './hooks/PlanetContext';\r\n\r\n\r\n\r\nfunction App() {\r\n  const {planet,setPlanet} = useCreatePlanetContext();\r\n\r\n  return (\r\n    <PlanetContext.Provider value={{ planet, setPlanet }}>\r\n\r\n      <div className={\"bg-dark\"}>\r\n        <Header />\r\n        <RandomPlanetPage />\r\n      </div>\r\n    </PlanetContext.Provider>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport \"./assets/fonts/Starjedi.ttf\";\r\nimport \"./assets/fonts/RobotoRegular.ttf\";\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}